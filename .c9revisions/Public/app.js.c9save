{"ts":1340896050738,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Let's define some shortcuts to increase\n// readability of the code\nvar ODataModel = sap.ui.model.odata.ODataModel,\n    TextView = sap.ui.commons.TextView,\n    Label = sap.ui.commons.Label,\n    DataTable = sap.ui.table.DataTable,\n    Toolbar = sap.ui.commons.Toolbar,\n    Button = sap.ui.commons.Button,\n    Column = sap.ui.table.Column,\n    Right = sap.ui.commons.layout.HAlign.Right,\n    Begin = sap.ui.commons.layout.HAlign.Begin,\n    SelectionMode = sap.ui.table.SelectionMode;\n\n// Specify the SAP Gateway SalesOrder service as an OData model.\n// Please note: we do not connect directly to SAP Gateway (no host specified)\n// Instead, the calls are made to the Node.js server,\n// which will proxy the calls to SAP GW\n// This way, we comply with Same Origin Policy of the browser. \nvar salesOrderService =\n        \"/sap/opu/sdata/IWFND/SALESORDER\",\n\n    // SAP Gateway only supports XML, so don't use JSON\n    asJson = false,\n    salesOrderModel = new ODataModel(salesOrderService, asJson),\n    salesOrderCollection = \"SalesOrderCollection\";\n\n// Create a button to request an Excel workbook from server \nvar button = new Button({\n    text: \"Download as Excel\",\n    icon: 'images/excel.png',\n    iconFirst: false,\n    height: '24px',\n    press: function () {\n        window.location = \"/workbook\"\n    }\n});\n\nvar toolbar = new Toolbar({ \n    items: [button]\n});\n\n// Create a master table with sales orders \nvar salesOrders = new DataTable({\n    title: \"Sales Orders\",\n    width: \"600px\",\n    visibleRowCount: 20,\n    toolbar: toolbar,\n    selectionMode: SelectionMode.None,\n    editable: false\n});\n\n// define the relevant column options\nvar salesOrderColumns = [\n    { header: \"Sales Order ID\", value: \"{SalesOrderID}\", width: '100px' },\n    { header: \"Customer Name\", value: \"{CustomerName}\", width: '100%' },\n    { header: \"Net\", value: \"{NetSum}\", width: '100px', hAlign: Right },\n    { header: \"Tax\", value: \"{Tax}\", width: '100px', hAlign: Right },\n    { header: \"Total\", value: \"{TotalSum}\", width: '100px', hAlign: Right }\n];\n\n// create the columns\nsalesOrderColumns.forEach(function (options) {\n    var label = new Label({ text: options.header }),\n        template = new TextView({ text: options.value }),\n        column = new Column({\n            label: label,\n            template: template,\n            width: options.width,\n            hAlign: options.hAlign || Begin\n        });\n\n    salesOrders.addColumn(column);\n});\n\n// connect the data table to the SalesOrder service\nsalesOrders.setModel(salesOrderModel);\n\n// An OData request for the SalesOrderCollection \n// will return the sales orders. \n// Each sales order should result in a table row.\nsalesOrders.bindRows(salesOrderCollection);\n\n// Put table in the DOM.\n// placeAt will automatically defer if \n// DOM is not ready yet (like in this demo).\nsalesOrders.placeAt(\"salesorders\");"]],"start1":0,"start2":0,"length1":0,"length2":2851}]],"length":2851}
