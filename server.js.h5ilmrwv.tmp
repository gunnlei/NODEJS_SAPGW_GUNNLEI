var http = require('http'),
    express = require('express'),
    xml2js = require('xml2js'),
    app = express.createServer(),
    port = process.env.PORT;

// The SalesOrder service requires authentication
// get the username/password from the SCN page. 
var username = 'GW@ESW',
    password = 'ESW4GW';

var sapgw = {
  host: 'gw.esworkplace.sap.com',

  // set up Basic authentication
  headers: {
    'Authorization': 'Basic ' + new Buffer(username + ':' + password).toString('base64')
  }
}

// Action: Proxy an incoming (ie. from the user's browser) request to the SAP Gateway
function proxy(user_request, user_response) {

  // We're proxying calls,
  // so copy the path from the user request
  sapgw.path = user_request.url;

  // Use a client request to call SAP Gateway
  http.get(sapgw, function (sapgw_response) {

    // Include a content type in the response header
    user_response.header('Content-Type', 'application/atom+xml;type=feed');

    // In Node, http responses are streams. You can just
    // pipe the response data from the Gateway to the user.
    sapgw_response.pipe(user_response);
  });
}

// Action: Generate an Excel workbook containing SalesOrders on the fly  
function workbook(req, res) {

  // We will fetch the SalesOrderCollection from SAP Gateway
  sapgw.path = '/sap/opu/sdata/IWFND/SALESORDER/SalesOrderCollection';

  // Kick-off by fetching the SalesOrderCollection..       
  http.get(sapgw, function (sapgw_response) {
    var xml = '';

    // Every time Node receives a chunk of data
    // from SAP Gateway, the 'data' event fires.
    // We just collect all chunks into a string
    sapgw_response.on("data", function (chunk) {
      xml += chunk
    });

    // The 'end' event fires when the SAP Gateway response is done 
    // We can start processing the xml string...
    sapgw_response.on("end", function () {

      // Node.js do